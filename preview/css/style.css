/* ============================================================================================ */
/* =====    PROJECT HealthCare

/* ============================================================================================ */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
.main-question__holder, .pre-footer--holder div, .footer-main--holder {
  *zoom: 1;
  width: auto;
  max-width: 80rem;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  padding: 0 10px; }
  .main-question__holder:before, .pre-footer--holder div:before, .footer-main--holder:before, .main-question__holder:after, .pre-footer--holder div:after, .footer-main--holder:after {
    content: '';
    display: table; }
  .main-question__holder:after, .pre-footer--holder div:after, .footer-main--holder:after {
    clear: both; }

/* normalize.scss 2.2.0+normalize.2.1.3 | MIT/GPLv2 License | bit.ly/normalize-with-compass */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 */
html {
  font-family: "Roboto", sans-serif;
  /* 1 */
  font-size: 100%;
  /* 3 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */
button,
input,
select,
textarea {
  font-family: "Roboto", sans-serif; }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Set 1 unit of vertical rhythm on the top and bottom margin.
 */
p,
pre {
  margin: 1.5em 0; }

blockquote {
  /* Set 1 unit of vertical rhythm on the top and bottom margin. */
  margin: 1.5em 40px; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  /* Set the font-size and line-height while keeping a proper vertical rhythm. */
  font-size: 2em;
  line-height: 1.5em;
  /* Set 1 unit of vertical rhythm on the top and bottom margins. */
  margin-top: 0.75em;
  margin-bottom: 0.75em; }

h2 {
  font-size: 1.5em;
  line-height: 2em;
  margin-top: 1em;
  margin-bottom: 1em; }

h3 {
  font-size: 1.17em;
  line-height: 1.28205em;
  margin-top: 1.28205em;
  margin-bottom: 1.28205em; }

h4 {
  font-size: 1em;
  line-height: 1.5em;
  margin-top: 1.5em;
  margin-bottom: 1.5em; }

h5 {
  font-size: 0.83em;
  line-height: 1.80723em;
  margin-top: 1.80723em;
  margin-bottom: 1.80723em; }

h6 {
  font-size: 0.67em;
  line-height: 2.23881em;
  margin-top: 2.23881em;
  margin-bottom: 2.23881em; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  _font-family: 'courier new', monospace;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Lists
   ========================================================================== */
/**
 * Address margins set differently in IE 6/7.
 */
dl,
menu,
ol,
ul {
  margin: 1.5em 0; }

dd {
  margin: 0 0 0 40px; }

/**
 * Address paddings set differently in IE 6/7.
 */
menu,
ol,
ul {
  padding: 0 0 0 40px; }

/**
 * Correct list images handled incorrectly in IE 7.
 */
nav ul,
nav ol {
  list-style: none;
  list-style-image: none; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
  /* Improve image quality when scaled in IE 7. */
  -ms-interpolation-mode: bicubic; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Correct margin displayed oddly in IE 6/7.
 */
form {
  margin: 0; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  margin: 0 2px;
  /* Apply borders and padding that keep the vertical rhythm. */
  border-color: #c0c0c0;
  border-top-style: solid;
  border-top-width: 0.0625em;
  padding-top: 0.4625em;
  border-bottom-style: solid;
  border-bottom-width: 0.0625em;
  padding-bottom: 0.9125em;
  border-left-style: solid;
  border-left-width: 0.0625em;
  padding-left: 0.875em;
  border-right-style: solid;
  border-right-width: 0.0625em;
  padding-right: 0.875em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
  *margin-left: -7px;
  /* 3 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 * 4. Improve appearance and consistency with IE 6/7.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
  vertical-align: baseline;
  /* 4 */
  *vertical-align: middle;
  /* 4 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
  *overflow: visible;
  /* 4 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
  *height: 13px;
  /* 3 */
  *width: 13px;
  /* 3 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

h1, h2, h3, h4 {
  margin: 0;
  padding: 0; }

html, button {
  -webkit-font-smoothing: antialiased; }

h1 {
  font-size: 3.625em;
  font-weight: 600;
  color: #3f3f3f;
  line-height: 1.0;
  letter-spacing: -1px;
  font-family: "Roboto", sans-serif; }

h2 {
  font-size: 1.875em;
  font-weight: 600;
  line-height: 1.2;
  color: #3f3f3f;
  line-height: 1.0;
  font-family: "Roboto", sans-serif; }

h3 {
  font-size: 1.375em;
  line-height: 1.3;
  font-weight: 600;
  color: #3f3f3f; }

h4 {
  font-size: 1.125em;
  line-height: 1.3;
  font-weight: 400;
  color: #a5a5a5; }

p {
  font-size: 1em;
  line-height: 1.3;
  font-weight: 400;
  color: #a5a5a5; }

a {
  -webkit-transition: all 0.15s ease;
  -moz-transition: all 0.15s ease;
  -o-transition: all 0.15s ease;
  transition: all 0.15s ease;
  line-height: 1.2;
  color: #00B266;
  text-decoration: none; }
  a:hover {
    color: #009953; }

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

html, body {
  width: 100%; }

body {
  font: 600 1em "Roboto", sans-serif;
  color: #3f3f3f; }

img {
  display: block;
  max-width: 100%;
  height: auto;
  outline: 0; }

strong {
  font-weight: 700; }

fieldset {
  border: none;
  padding: 0;
  margin: 0; }

blockquote {
  margin: 0; }

ul {
  list-style-type: none;
  padding: 0;
  margin: 0; }

menu ul,
menu li,
nav ul,
nav li {
  margin: 0;
  padding: 0; }

hr {
  width: 100%;
  height: 20px;
  margin: 0 0 23px;
  border: none;
  border-bottom: 1px solid #cccccc; }

button:focus {
  outline: none; }

.mobile {
  display: none !important; }

.desktop {
  display: block !important; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
h1, h2, h3, h4 {
  margin: 0;
  padding: 0; }

html, button {
  -webkit-font-smoothing: antialiased; }

h1 {
  font-size: 3.625em;
  font-weight: 600;
  color: #3f3f3f;
  line-height: 1.0;
  letter-spacing: -1px;
  font-family: "Roboto", sans-serif; }

h2 {
  font-size: 1.875em;
  font-weight: 600;
  line-height: 1.2;
  color: #3f3f3f;
  line-height: 1.0;
  font-family: "Roboto", sans-serif; }

h3 {
  font-size: 1.375em;
  line-height: 1.3;
  font-weight: 600;
  color: #3f3f3f; }

h4 {
  font-size: 1.125em;
  line-height: 1.3;
  font-weight: 400;
  color: #a5a5a5; }

p {
  font-size: 1em;
  line-height: 1.3;
  font-weight: 400;
  color: #a5a5a5; }

a {
  -webkit-transition: all 0.15s ease;
  -moz-transition: all 0.15s ease;
  -o-transition: all 0.15s ease;
  transition: all 0.15s ease;
  line-height: 1.2;
  color: #00B266;
  text-decoration: none; }
  a:hover {
    color: #009953; }

.header-main {
  position: relative;
  width: 100%;
  background: #d32f2f;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);
  -webkit-transform: translateZ(o);
  -moz-transform: translateZ(o);
  -ms-transform: translateZ(o);
  -o-transform: translateZ(o);
  transform: translateZ(o);
  -webkit-backface-visibility: hidden; }

.header-main--holder {
  padding: 0 15px;
  background-color: #d32f2f; }
  .header-main--holder .header-logo {
    font-size: 1.28125em;
    font-weight: 400;
    display: inline-block;
    padding: 0.625em 0;
    text-align: left;
    vertical-align: middle;
    letter-spacing: -.25px;
    color: #fff;
    outline: none; }
  .header-main--holder nav {
    float: right; }
    .header-main--holder nav > span {
      padding: 0.84375em 10px;
      color: #fff;
      font-weight: 300; }
  .header-main--holder #template-select {
    background-color: #d32f2f;
    padding: 0.84375em 30px;
    border: 0;
    outline: none;
    color: #fff; }
    .header-main--holder #template-select option {
      color: #f2f2f2;
      background-color: #d32f2f; }

.drop {
  font-size: 1em;
  font-weight: 400;
  position: relative;
  float: right;
  padding: 0.8125em 25px;
  list-style-type: none;
  cursor: pointer;
  color: #fff; }
  .drop ul {
    position: absolute;
    top: 50px;
    left: 0;
    transition: all .3s ease;
    transform: scale(0);
    transform-origin: 0 0;
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 8px 0 rgba(0, 0, 0, 0.12); }
    .drop ul li {
      display: block;
      width: 100%;
      text-align: center;
      background-color: #d32f2f; }
      .drop ul li a {
        font-size: 15px;
        font-weight: 400;
        display: inline-block;
        box-sizing: border-box;
        width: 100%;
        padding: 15px 52px;
        white-space: pre;
        color: #fff; }
        .drop ul li a:hover {
          background-color: #ab2424; }
  .drop:hover {
    background-color: #ab2424; }
    .drop:hover ul {
      transform: scale(1); }

main {
  text-align: left; }

.nav-container {
  display: inline-block;
  min-width: 220px;
  height: calc(100vh - 50px);
  padding: 2% 0;
  background-color: #252833;
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 12.5%;
  margin-left: 0%;
  margin-right: 0%; }
  .nav-container:before, .nav-container:after {
    content: '';
    display: table; }
  .nav-container:after {
    clear: both; }
  .nav-container:last-child {
    margin-right: 0%; }
  .nav-container li {
    position: relative; }
    .nav-container li a {
      font-size: 15px;
      font-weight: 300;
      display: block;
      padding: 15px;
      color: #fff; }
      .nav-container li a:hover {
        background-color: #363b4b; }
    .nav-container li:before {
      font-weight: 300;
      position: absolute;
      top: 50%;
      right: 8%;
      content: ' >';
      color: #fff;
      -webkit-transform: translate(-8%, -50%);
      -moz-transform: translate(-8%, -50%);
      -ms-transform: translate(-8%, -50%);
      -o-transform: translate(-8%, -50%);
      transform: translate(-8%, -50%); }

.main-container {
  display: inline-block;
  max-width: calc(100% - 220px);
  height: calc(100vh - 50px);
  background-color: #e5e5e5;
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 87.5%;
  margin-left: 0%;
  margin-right: 0%; }
  .main-container:before, .main-container:after {
    content: '';
    display: table; }
  .main-container:after {
    clear: both; }
  .main-container:last-child {
    margin-right: 0%; }
  .main-container > div {
    display: inline-block;
    height: calc(100vh - 50px);
    padding: 2%;
    border-right: 1px solid rgba(0, 0, 0, 0.1);
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 74.75%;
    margin-left: 0%;
    margin-right: 1%; }
    .main-container > div:before, .main-container > div:after {
      content: '';
      display: table; }
    .main-container > div:after {
      clear: both; }
    .main-container > div:last-child {
      margin-right: 0%; }
    .main-container > div:last-child {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 24.25%;
      margin-left: 0%;
      margin-right: 1%;
      border-right: none;
      padding: 2% 10px; }
      .main-container > div:last-child:before, .main-container > div:last-child:after {
        content: '';
        display: table; }
      .main-container > div:last-child:after {
        clear: both; }
      .main-container > div:last-child:last-child {
        margin-right: 0%; }
      .main-container > div:last-child iframe {
        border-top: 1px solid #efefef;
        border-bottom: 1px solid #efefef;
        width: 320px;
        height: 461px;
        margin: 129px 0 0 23px; }
    .main-container > div iframe {
      margin-top: 20px;
      background: #FFF;
      border: 0;
      height: 80vh;
      width: 100%; }

.mobile-preview__container {
  background: transparent url(../images/phone.png) no-repeat 50% 0;
  background-size: 363px 711px;
  width: 363px;
  height: 711px;
  margin: 20px auto 0 auto;
  opacity: 1;
  text-align: left; }

.main-question {
  padding: 5.3125rem 0 7.1875rem 0; }

.main-question__holder {
  padding: 0 5.7%;
  text-align: left; }
  .main-question__holder form {
    padding-bottom: 5.625em;
    text-align: left; }
  .main-question__holder h2 {
    padding-bottom: 0.9375rem; }
  .main-question__holder > button {
    margin: 0 0 0 6.7em; }
  .main-question__holder #btn-reset {
    display: none; }

.footer-main {
  width: 100%;
  background: #333333; }

.pre-footer--holder {
  background: #3D3D3D;
  padding: 1.875rem 0; }
  .pre-footer--holder div {
    text-align: center; }
    .pre-footer--holder div p {
      display: inline-block;
      margin: 0;
      padding: 0 .5em 0 0;
      font-size: 16px;
      font-weight: bold;
      color: #B9B9B9; }
    .pre-footer--holder div ul {
      display: inline-block;
      list-style-type: none; }
      .pre-footer--holder div ul li {
        display: inline-block;
        padding: 0 .1em; }
        .pre-footer--holder div ul li a {
          font-size: 30px;
          color: #F49B6C; }
          .pre-footer--holder div ul li a:hover {
            color: #D1784E; }

.footer-main--holder {
  text-align: center;
  padding: 1.875rem 0; }
  .footer-main--holder p {
    margin: 0;
    padding: 0 0 .8em 0;
    font-size: 13px;
    color: #B9B9B9; }
    .footer-main--holder p a {
      display: inline-block;
      vertical-align: middle; }
    .footer-main--holder p .footer--link {
      color: #8b8b8b;
      font-weight: bold; }
      .footer-main--holder p .footer--link:hover {
        color: #727272; }
    .footer-main--holder p:last-child {
      padding: 0; }

/* Desktop < 1280 */
@media only screen and (max-width: 1280px) {
  .result-section__holder .result__cite {
    display: none; }
  .result-section__holder .result__profile {
    padding-right: 1%; } }
@media only screen and (max-width: 1024px) {
  .header-main--holder {
    padding-bottom: 2.5em; }
    .header-main--holder div {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 100%;
      margin-left: 0%;
      margin-right: 1%; }
      .header-main--holder div:before, .header-main--holder div:after {
        content: '';
        display: table; }
      .header-main--holder div:after {
        clear: both; }
      .header-main--holder div:last-child {
        margin-right: 0%; }
    .header-main--holder div:last-child {
      display: none; }
    .header-main--holder h1 {
      padding: 3.75rem 0 2.375rem 0;
      font-size: 3.125em; }
    .header-main--holder h4:before {
      display: none; }

  .register-section .register-section__holder h1 {
    font-size: 3.125em; } }
/* Tablets Portrait < 768 */
@media only screen and (max-width: 768px) {
  .result-section__holder {
    padding: 0 5.7%; }
    .result-section__holder > div {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 100%;
      margin-left: 0%;
      margin-right: 3%; }
      .result-section__holder > div:before, .result-section__holder > div:after {
        content: '';
        display: table; }
      .result-section__holder > div:after {
        clear: both; }
      .result-section__holder > div:last-child {
        margin-right: 0%; }
      .result-section__holder > div:last-child {
        *zoom: 1;
        float: left;
        clear: none;
        text-align: inherit;
        width: 100%;
        margin-left: 0%;
        margin-right: 3%; }
        .result-section__holder > div:last-child:before, .result-section__holder > div:last-child:after {
          content: '';
          display: table; }
        .result-section__holder > div:last-child:after {
          clear: both; }
        .result-section__holder > div:last-child:last-child {
          margin-right: 0%; }
    .result-section__holder .result__human {
      text-align: center; }
      .result-section__holder .result__human img {
        padding: 0.625rem 25% 0 0; }
    .result-section__holder .result__profile {
      max-width: 100%;
      margin-top: -8%; }
      .result-section__holder .result__profile .profile__social {
        padding-top: 0.625rem; }
        .result-section__holder .result__profile .profile__social .profile--social__holder {
          display: inline-block;
          padding-right: 10%; }
          .result-section__holder .result__profile .profile__social .profile--social__holder li {
            display: inline-block;
            font-size: 1.875rem;
            padding: 0 .1rem; }
            .result-section__holder .result__profile .profile__social .profile--social__holder li a {
              color: #FCF8F1;
              cursor: pointer;
              position: relative; }
              .result-section__holder .result__profile .profile__social .profile--social__holder li a:hover {
                opacity: .6; }
            .result-section__holder .result__profile .profile__social .profile--social__holder li span {
              position: absolute;
              font-size: 0.9375rem;
              display: inline-block;
              line-height: 42px;
              text-align: center;
              vertical-align: middle;
              color: #FCF8F1;
              left: 50px; }
              .result-section__holder .result__profile .profile__social .profile--social__holder li span:before {
                position: absolute;
                font-size: 3rem;
                top: -13px;
                left: -17px; }
            .result-section__holder .result__profile .profile__social .profile--social__holder li:last-child {
              padding-right: 0; }
        .result-section__holder .result__profile .profile__social .profile__reset {
          font-style: italic; }
      .result-section__holder .result__profile p {
        padding-bottom: 3.125rem; }
        .result-section__holder .result__profile p:last-child {
          display: none; } }
/* Tablets Portrait < 600 */
@media only screen and (max-width: 600px) {
  .header-main--holder h1 {
    font-size: 2.8125em; }
  .header-main--holder h4 {
    font-size: 1em; }

  .result-section__holder .result__profile h1 {
    font-size: 3rem; }
  .result-section__holder .result__profile h3 {
    font-size: 1.625rem;
    padding: 0 0 1.875rem 0; }
  .result-section__holder .result__profile span {
    font-size: 1.0625rem; }
  .result-section__holder .result__profile p {
    font-size: 1rem;
    padding: 0 0 4.375rem 0;
    color: #fff; }

  .main-question {
    padding: 5.3125rem 0; }

  .main-question__holder h2 {
    font-size: 1.625em; }
  .main-question__holder form {
    padding-bottom: 4.375em;
    text-align: left; }
    .main-question__holder form h3 {
      font-size: 1.25em; }
    .main-question__holder form label {
      font-size: 1em; }
  .main-question__holder .ac-custom input[type="checkbox"],
  .main-question__holder .ac-custom input[type="radio"],
  .main-question__holder .ac-custom label::before {
    width: 52px;
    height: 52px; }
  .main-question__holder .ac-custom svg {
    position: absolute;
    width: 44px;
    height: 44px; }
  .main-question__holder .ac-custom svg path {
    stroke-width: 5px; }
  .main-question__holder .ac-custom input[type="checkbox"]:checked + label::before,
  .main-question__holder .ac-custom input[type="radio"]:checked + label::before {
    -webkit-box-shadow: #f49b6c 0 0 0 4px;
    -moz-box-shadow: #f49b6c 0 0 0 4px;
    box-shadow: #f49b6c 0 0 0 4px; }

  .register-section .register-section__holder h1 {
    font-size: 2.8125em; }

  .resources-section .resources-section__holder h2 {
    font-size: 1.625em; }
  .resources-section .resources-section__holder li {
    padding: 0.625rem 0; }
    .resources-section .resources-section__holder li a {
      font-size: 1rem;
      font-weight: 600;
      line-height: 1.3;
      color: #F39A6C; }
      .resources-section .resources-section__holder li a:hover {
        color: #D7793D; }
    .resources-section .resources-section__holder li span[class^="icon-"] {
      position: relative;
      vertical-align: super; }
      .resources-section .resources-section__holder li span[class^="icon-"]:before {
        position: absolute;
        font-size: 24px;
        right: -29px;
        top: -4px; }
    .resources-section .resources-section__holder li:first-child {
      padding-top: 0; } }
/* Tablets Portrait < 480 */
@media only screen and (max-width: 480px) {
  .header-main--holder h1 {
    font-size: 2.25em; }
  .header-main--holder h4 {
    font-size: 1em;
    letter-spacing: 0; }

  .main-question__holder h2 {
    font-size: 1.375em; }
  .main-question__holder form {
    padding-bottom: 3.4375em;
    text-align: left; }
    .main-question__holder form h3 {
      font-size: 1.125em; }
    .main-question__holder form label {
      font-size: 0.875em;
      padding: 0 0 0 4.6875em; }
  .main-question__holder > button {
    margin: 0 auto;
    text-align: center;
    display: block; }
  .main-question__holder .ac-custom input[type="checkbox"],
  .main-question__holder .ac-custom input[type="radio"],
  .main-question__holder .ac-custom label::before {
    width: 50px;
    height: 50px; }
  .main-question__holder .ac-custom svg {
    position: absolute;
    width: 42px;
    height: 42px; }
  .main-question__holder .ac-custom svg path {
    stroke-width: 5px; }
  .main-question__holder .ac-custom input[type="checkbox"]:checked + label::before,
  .main-question__holder .ac-custom input[type="radio"]:checked + label::before {
    -webkit-box-shadow: #f49b6c 0 0 0 4px;
    -moz-box-shadow: #f49b6c 0 0 0 4px;
    box-shadow: #f49b6c 0 0 0 4px; }

  .result-section__holder .result__human img {
    padding: 0.625rem 30% 0 0; }
  .result-section__holder .result__profile h1 {
    font-size: 2.25rem; }
  .result-section__holder .result__profile h3 {
    font-size: 1.375rem;
    padding: 0 0 1.5625rem 0; }
  .result-section__holder .result__profile span {
    font-size: 1rem; }
  .result-section__holder .result__profile p {
    font-size: 0.875rem;
    line-height: 1.4;
    padding: 0 0 3.125rem 0;
    color: #fff; }

  .register-section .register-section__holder h1 {
    font-size: 2.25em; } }
.button {
  font: 400 0.8125em "Roboto", sans-serif;
  background: #02202f;
  color: white;
  cursor: pointer;
  -webkit-appearance: none;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  display: inline-block;
  padding: 1.375rem 2.375rem;
  -webkit-border-radius: 0.3125rem;
  -moz-border-radius: 0.3125rem;
  -ms-border-radius: 0.3125rem;
  -o-border-radius: 0.3125rem;
  border-radius: 0.3125rem;
  -webkit-transition: background 0.15s ease;
  -moz-transition: background 0.15s ease;
  -o-transition: background 0.15s ease;
  transition: background 0.15s ease; }
  .button:hover {
    background: #183553;
    color: white; }
  .button.button--hollow {
    background: transparent;
    border: 1px solid #F49B6C;
    color: #F39A6C; }
    .button.button--hollow:hover {
      background: rgba(250, 229, 214, 0.8); }
  .button.button--orange {
    background-color: #F49B6C; }
    .button.button--orange:hover {
      background-color: #D1784E; }
  @media only screen and (max-width: 480px) {
    .button {
      padding: 1.5rem 3.0625rem !important; }
      .button:before {
        display: none !important; } }

.progress-button {
  position: relative;
  display: inline-block;
  padding: 1.375rem 2.375rem;
  outline: none;
  border: none;
  background: #F49B6C;
  color: #fff;
  border: 1px solid #F49B6C;
  text-transform: uppercase;
  font-size: 13px;
  line-height: 13px;
  -webkit-border-radius: 0.3125rem;
  -moz-border-radius: 0.3125rem;
  -ms-border-radius: 0.3125rem;
  -o-border-radius: 0.3125rem;
  border-radius: 0.3125rem;
  -webkit-transition: background 0.15s ease;
  -moz-transition: background 0.15s ease;
  -o-transition: background 0.15s ease;
  transition: background 0.15s ease; }
  .progress-button:hover {
    background-color: #D1784E; }

.progress-button[disabled],
.progress-button[disabled].state-loading {
  cursor: default; }

.progress-button .content {
  position: relative;
  display: block; }

.progress-button.state-loading .content {
  color: transparent; }

.notransition {
  transition: none !important; }

.progress-button .progress {
  background: #fff; }

.progress-button .progress-inner {
  position: absolute;
  left: 0;
  background: #fff; }

.progress-button[data-horizontal] .progress-inner {
  top: 0;
  width: 0;
  height: 100%;
  transition: width 0.5s, opacity .5s; }

/* Fill horizontal */
/* ====================== */
.progress-button[data-style="fill"][data-horizontal] {
  overflow: hidden; }

.progress-button[data-style="fill"][data-horizontal] .content {
  z-index: 10;
  -webkit-transition: -webkit-transform 0.5s;
  transition: transform 0.5s; }

.ac-custom li {
  margin: 0 auto;
  padding: 1.25rem 0;
  position: relative; }

.ac-custom label {
  display: inline-block;
  position: relative;
  font-size: 1.0625rem;
  font-weight: 400;
  padding: 0 0 0 5em;
  vertical-align: top;
  color: #a5a5a5;
  cursor: pointer;
  line-height: 1.3; }
  @media only screen and (max-width: 480px) {
    .ac-custom label {
      padding: 0 0 0 3.75em;
      font-size: 1rem; } }

.ac-custom input[type="checkbox"],
.ac-custom input[type="radio"],
.ac-custom label::before {
  width: 58px;
  height: 58px;
  top: 50%;
  left: 0;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
  position: absolute;
  cursor: pointer; }

.ac-custom input[type="checkbox"],
.ac-custom input[type="radio"] {
  opacity: 0;
  -webkit-appearance: none;
  display: inline-block;
  vertical-align: middle;
  z-index: 100; }

.ac-custom input[disabled="disabled"] + label {
  color: #ccc !important; }
  .ac-custom input[disabled="disabled"] + label h3 {
    color: #ccc !important; }

.ac-custom input[disabled="disabled"] + label + svg path {
  stroke: #ccc !important; }

.ac-custom input[disabled="disabled"] + label::before {
  -webkit-box-shadow: #cccccc 0 0 0 3px !important;
  -moz-box-shadow: #cccccc 0 0 0 3px !important;
  box-shadow: #cccccc 0 0 0 3px !important; }

.ac-custom label::before {
  content: '';
  -webkit-box-shadow: #f49b6c 0 0 0 3px;
  -moz-box-shadow: #f49b6c 0 0 0 3px;
  box-shadow: #f49b6c 0 0 0 3px;
  -webkit-transition: all 0.3s ease;
  -moz-transition: all 0.3s ease;
  -o-transition: all 0.3s ease;
  transition: all 0.3s ease; }

.ac-radio label::before {
  border-radius: 50%; }

.ac-custom input[type="checkbox"]:checked + label,
.ac-custom input[type="radio"]:checked + label {
  color: #EE9C70; }
  .ac-custom input[type="checkbox"]:checked + label h3,
  .ac-custom input[type="radio"]:checked + label h3 {
    color: #EE9C70; }

.ac-custom input[type="checkbox"]:checked + label::before,
.ac-custom input[type="radio"]:checked + label::before {
  -webkit-box-shadow: #f49b6c 0 0 0 5px;
  -moz-box-shadow: #f49b6c 0 0 0 5px;
  box-shadow: #f49b6c 0 0 0 5px; }

/* General SVG and path styles */
.ac-custom svg {
  position: absolute;
  width: 50px;
  height: 50px;
  top: 50%;
  margin-top: -22px;
  left: 5px;
  pointer-events: none; }

.ac-custom svg path {
  stroke: #F49B6C;
  stroke-width: 7px;
  stroke-linecap: round;
  stroke-linejoin: round;
  fill: none; }

@font-face {
  font-family: "icons";
  src: url("../fonts/icons.eot");
  src: url("../fonts/icons.eot?#iefix") format("embedded-opentype"), url("../fonts/icons.woff") format("woff"), url("../fonts/icons.ttf") format("truetype");
  font-weight: normal;
  font-style: normal; }

.ms-icon {
  font-family: "icons";
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-facebook:before {
  content: "\f101"; }

.icon-footerfacebook:before {
  content: "\f102"; }

.icon-footergplus:before {
  content: "\f103"; }

.icon-footerpinterest:before {
  content: "\f104"; }

.icon-footertwitter:before {
  content: "\f105"; }

.icon-googleplus:before {
  content: "\f106"; }

.icon-i-computer:before {
  content: "\f107"; }

.icon-i-question:before {
  content: "\f108"; }

.icon-i-ribbon:before {
  content: "\f109"; }

.icon-linkedin:before {
  content: "\f10a"; }

.icon-makingsense:before {
  content: "\f10b"; }

.icon-pinterest:before {
  content: "\f10c"; }

.icon-sharecount:before {
  content: "\f10d"; }

.icon-twitter:before {
  content: "\f10e"; }

.icon-youtube:before {
  content: "\f10f"; }

@-webkit-keyframes shake {
  80%, 90% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }

  10%, 30%, 50%, 70% {
    -webkit-transform: translate3d(3px, 0, 0);
    -moz-transform: translate3d(3px, 0, 0);
    -ms-transform: translate3d(3px, 0, 0);
    -o-transform: translate3d(3px, 0, 0);
    transform: translate3d(3px, 0, 0); }

  0%, 20%, 40%, 60%, 100% {
    -webkit-transform: translate3d(-3px, 0, 0);
    -moz-transform: translate3d(-3px, 0, 0);
    -ms-transform: translate3d(-3px, 0, 0);
    -o-transform: translate3d(-3px, 0, 0);
    transform: translate3d(-3px, 0, 0); } }

@-moz-keyframes shake {
  80%, 90% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }

  10%, 30%, 50%, 70% {
    -webkit-transform: translate3d(3px, 0, 0);
    -moz-transform: translate3d(3px, 0, 0);
    -ms-transform: translate3d(3px, 0, 0);
    -o-transform: translate3d(3px, 0, 0);
    transform: translate3d(3px, 0, 0); }

  0%, 20%, 40%, 60%, 100% {
    -webkit-transform: translate3d(-3px, 0, 0);
    -moz-transform: translate3d(-3px, 0, 0);
    -ms-transform: translate3d(-3px, 0, 0);
    -o-transform: translate3d(-3px, 0, 0);
    transform: translate3d(-3px, 0, 0); } }

@-ms-keyframes shake {
  80%, 90% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }

  10%, 30%, 50%, 70% {
    -webkit-transform: translate3d(3px, 0, 0);
    -moz-transform: translate3d(3px, 0, 0);
    -ms-transform: translate3d(3px, 0, 0);
    -o-transform: translate3d(3px, 0, 0);
    transform: translate3d(3px, 0, 0); }

  0%, 20%, 40%, 60%, 100% {
    -webkit-transform: translate3d(-3px, 0, 0);
    -moz-transform: translate3d(-3px, 0, 0);
    -ms-transform: translate3d(-3px, 0, 0);
    -o-transform: translate3d(-3px, 0, 0);
    transform: translate3d(-3px, 0, 0); } }

@-o-keyframes shake {
  80%, 90% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }

  10%, 30%, 50%, 70% {
    -webkit-transform: translate3d(3px, 0, 0);
    -moz-transform: translate3d(3px, 0, 0);
    -ms-transform: translate3d(3px, 0, 0);
    -o-transform: translate3d(3px, 0, 0);
    transform: translate3d(3px, 0, 0); }

  0%, 20%, 40%, 60%, 100% {
    -webkit-transform: translate3d(-3px, 0, 0);
    -moz-transform: translate3d(-3px, 0, 0);
    -ms-transform: translate3d(-3px, 0, 0);
    -o-transform: translate3d(-3px, 0, 0);
    transform: translate3d(-3px, 0, 0); } }

@keyframes shake {
  80%, 90% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }

  10%, 30%, 50%, 70% {
    -webkit-transform: translate3d(3px, 0, 0);
    -moz-transform: translate3d(3px, 0, 0);
    -ms-transform: translate3d(3px, 0, 0);
    -o-transform: translate3d(3px, 0, 0);
    transform: translate3d(3px, 0, 0); }

  0%, 20%, 40%, 60%, 100% {
    -webkit-transform: translate3d(-3px, 0, 0);
    -moz-transform: translate3d(-3px, 0, 0);
    -ms-transform: translate3d(-3px, 0, 0);
    -o-transform: translate3d(-3px, 0, 0);
    transform: translate3d(-3px, 0, 0); } }

@-webkit-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }

@-moz-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }

@-ms-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }

@-o-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }

@keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }

@-webkit-keyframes moveToLeft {
  to {
    -webkit-transform: translateX(-200%);
    -moz-transform: translateX(-200%);
    -ms-transform: translateX(-200%);
    -o-transform: translateX(-200%);
    transform: translateX(-200%); } }

@-moz-keyframes moveToLeft {
  to {
    -webkit-transform: translateX(-200%);
    -moz-transform: translateX(-200%);
    -ms-transform: translateX(-200%);
    -o-transform: translateX(-200%);
    transform: translateX(-200%); } }

@-ms-keyframes moveToLeft {
  to {
    -webkit-transform: translateX(-200%);
    -moz-transform: translateX(-200%);
    -ms-transform: translateX(-200%);
    -o-transform: translateX(-200%);
    transform: translateX(-200%); } }

@-o-keyframes moveToLeft {
  to {
    -webkit-transform: translateX(-200%);
    -moz-transform: translateX(-200%);
    -ms-transform: translateX(-200%);
    -o-transform: translateX(-200%);
    transform: translateX(-200%); } }

@keyframes moveToLeft {
  to {
    -webkit-transform: translateX(-200%);
    -moz-transform: translateX(-200%);
    -ms-transform: translateX(-200%);
    -o-transform: translateX(-200%);
    transform: translateX(-200%); } }

@-webkit-keyframes moveFromRight {
  from {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }

@-moz-keyframes moveFromRight {
  from {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }

@-ms-keyframes moveFromRight {
  from {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }

@-o-keyframes moveFromRight {
  from {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }

@keyframes moveFromRight {
  from {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -ms-transform: translateX(100%);
    -o-transform: translateX(100%);
    transform: translateX(100%); } }

.shake {
  -webkit-animation: shake 4s ease-in-out infinite;
  -moz-animation: shake 4s ease-in-out infinite;
  -ms-animation: shake 4s ease-in-out infinite;
  -o-animation: shake 4s ease-in-out infinite;
  animation: shake 4s ease-in-out infinite; }

.incomplete {
  -webkit-animation: shake .9s ease-in-out forwards;
  -moz-animation: shake .9s ease-in-out forwards;
  -ms-animation: shake .9s ease-in-out forwards;
  -o-animation: shake .9s ease-in-out forwards;
  animation: shake .9s ease-in-out forwards; }

.fadeIn {
  -webkit-animation: fadeIn .5s ease-in-out forwards;
  -moz-animation: fadeIn .5s ease-in-out forwards;
  -ms-animation: fadeIn .5s ease-in-out forwards;
  -o-animation: fadeIn .5s ease-in-out forwards;
  animation: fadeIn .5s ease-in-out forwards; }

.moveToLeft {
  -webkit-animation: moveToLeft .6s ease both;
  -moz-animation: moveToLeft .6s ease both;
  -ms-animation: moveToLeft .6s ease both;
  -o-animation: moveToLeft .6s ease both;
  animation: moveToLeft .6s ease both; }

.moveFromRight {
  -webkit-animation: moveFromRight .6s ease both;
  -moz-animation: moveFromRight .6s ease both;
  -ms-animation: moveFromRight .6s ease both;
  -o-animation: moveFromRight .6s ease both;
  animation: moveFromRight .6s ease both; }

/* Slider */
.slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -ms-touch-action: pan-y;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent; }

.slick-list {
  position: relative;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0; }
  .slick-list:focus {
    outline: none; }
  .slick-list.dragging {
    cursor: pointer;
    cursor: hand; }

.slick-slider .slick-track,
.slick-slider .slick-list {
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0); }

.slick-track {
  position: relative;
  left: 0;
  top: 0;
  display: block; }
  .slick-track:before, .slick-track:after {
    content: "";
    display: table; }
  .slick-track:after {
    clear: both; }
  .slick-loading .slick-track {
    visibility: hidden; }

.slick-slide {
  float: left;
  height: 100%;
  min-height: 1px;
  display: none; }
  [dir="rtl"] .slick-slide {
    float: right; }
  .slick-slide img {
    display: block; }
  .slick-slide.slick-loading img {
    display: none; }
  .slick-slide.dragging img {
    pointer-events: none; }
  .slick-initialized .slick-slide {
    display: block; }
  .slick-loading .slick-slide {
    visibility: hidden; }
  .slick-vertical .slick-slide {
    display: block;
    height: auto;
    border: 1px solid transparent; }

/*@ sourceMappingURL=styles.css.map */